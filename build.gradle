plugins {
    id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.gradleup.shadow' version '8.3.6' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.mod_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_base_name-$project.name"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}

// Centralized data generation task
task runDataGen {
    group = 'data'
    description = 'Runs centralized data generation for Geco'
    
    dependsOn ':common:classes'
    
    doFirst {
        // Clear generated resources directory
        delete "${project(':common').projectDir}/generated/resources"
        // Delete all files listed in generated_resource_list.md from src/main/resources to avoid duplicates
        def generatedResourceListFile = file("generated_resource_list.md")
        if (generatedResourceListFile.exists()) {
            def filesToDelete = generatedResourceListFile.readLines().findAll { it.startsWith('- ') }.collect { it.substring(2).trim() }
            filesToDelete.each { relativePath ->
                def fileToDelete = file("${project(':common').projectDir}/src/main/resources/${relativePath}")
                if (fileToDelete.exists()) {
                    delete fileToDelete
                    logger.lifecycle("Deleted duplicate file: ${fileToDelete.relativePath}")
                }
            }
        }
    }
    
    // Run the custom data generator
    doLast {
        javaexec {
            main = 'com.nstut.geco.datagen.GecoDataGenerator'
            classpath = project(':common').sourceSets.main.runtimeClasspath
            workingDir = project(':common').projectDir
        }

        // Verify generated files
        def generatedResourceListFile = file("generated_resource_list.md")
        if (generatedResourceListFile.exists()) {
            def expectedFiles = generatedResourceListFile.readLines().findAll { it.startsWith('- ') }.collect { it.substring(2).trim() }
            def generatedDir = file("${project(':common').projectDir}/generated/resources")
            def actualFiles = []
            generatedDir.eachFileRecurse { file ->
                if (file.isFile()) {
                    actualFiles.add(file.path.substring(generatedDir.path.length() + 1))
                }
            }

            def missingFiles = expectedFiles.minus(actualFiles)
            def unexpectedFiles = actualFiles.minus(expectedFiles)

            if (!missingFiles.isEmpty()) {
                logger.error("ERROR: The following expected generated files are missing: ${missingFiles.join(', ')}")
                throw new GradleException("Missing generated files.")
            }
            if (!unexpectedFiles.isEmpty()) {
                logger.warn("WARNING: The following unexpected files were generated: ${unexpectedFiles.join(', ')}")
            }
            logger.lifecycle("Data generation verification complete. All expected files were generated.")
        } else {
            logger.warn("WARNING: generated_resource_list.md not found. Skipping generated file verification.")
        }
    }
}