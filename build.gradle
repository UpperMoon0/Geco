plugins {
    id 'java-library'
    id 'maven-publish'
}

// Configure gradle wrapper
tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

// Configure all projects
allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }


    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
}

// Configure subprojects
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }

    // Configure shadow jar for platform modules (fabric/neoforge)
    plugins.withId('com.gradleup.shadow') {
        configurations {
            common {
                canBeResolved = true
                canBeConsumed = false
            }
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            
            shadowBundle {
                canBeResolved = true
                canBeConsumed = false
            }
        }

        shadowJar {
            configurations = [project.configurations.shadowBundle]
            archiveClassifier = 'dev-shadow'
        }

        remapJar {
            inputFile.set shadowJar.archiveFile
        }
    }
}

// Centralized data generation tasks - using Fabric's datagen for all platforms
task runDataGen {
    group = 'data'
    description = 'Runs centralized data generation using Fabric datagen'
    dependsOn ':fabric:runDatagen'
}
