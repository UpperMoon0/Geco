plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

// Include common source files in development
sourceSets.main.resources {
    srcDirs += 'src/generated/resources'
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) {
        transitive false
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
    
    // Ensure common classes are available in development
    implementation(project(':common')) {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    inputs.property 'mod_version', rootProject.mod_version
    inputs.property 'mod_id', rootProject.mod_id
    inputs.property 'mod_name', rootProject.mod_name
    inputs.property 'mod_description', rootProject.mod_description
    inputs.property 'mod_authors', rootProject.mod_authors

    filesMatching('META-INF/neoforge.mods.toml') {
        expand(
            mod_version: rootProject.mod_version,
            mod_id: rootProject.mod_id,
            mod_name: rootProject.mod_name,
            mod_description: rootProject.mod_description,
            mod_authors: rootProject.mod_authors,
        )
    }
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}