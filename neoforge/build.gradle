plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) {
        transitive false
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mod_version', rootProject.mod_version
    inputs.property 'archives_name', rootProject.archives_name
    inputs.property 'mod_display_name', rootProject.mod_display_name
    inputs.property 'minecraft_version', rootProject.minecraft_version
    inputs.property 'neoforge_version', rootProject.neoforge_version
    inputs.property 'architectury_api_version', rootProject.architectury_api_version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand(
            version: project.version,
            mod_version: rootProject.mod_version,
            archives_name: rootProject.archives_name,
            mod_display_name: rootProject.mod_display_name,
            minecraft_version: rootProject.minecraft_version,
            neoforge_version: rootProject.neoforge_version,
            architectury_api_version: rootProject.architectury_api_version
        )
    }

    from(project(':common').sourceSets.main.resources) {
        include 'geco.mixins.json'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

